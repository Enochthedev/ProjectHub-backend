name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Run linting
        working-directory: ./frontend
        run: npm run lint
      
      - name: Run type checking
        working-directory: ./frontend
        run: npm run type-check
      
      - name: Run unit tests with coverage
        working-directory: ./frontend
        run: npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}
          path: |
            frontend/test-results/
            frontend/coverage/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Run accessibility tests
        working-directory: ./frontend
        run: npm run test:a11y
      
      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: frontend/test-results/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Build application
        working-directory: ./frontend
        run: npm run build
      
      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Build application
        working-directory: ./frontend
        run: npm run build
      
      - name: Run performance tests
        working-directory: ./frontend
        run: npm run test:performance
      
      - name: Run Lighthouse audit
        working-directory: ./frontend
        run: |
          npm start &
          sleep 10
          npm run perf:lighthouse
          kill %1
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            frontend/lighthouse-report.json
            frontend/test-results/

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install --with-deps
      
      - name: Build application
        working-directory: ./frontend
        run: npm run build
      
      - name: Run visual regression tests
        working-directory: ./frontend
        run: npm run test:visual
      
      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: |
            frontend/test-results/
            frontend/playwright-report/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Run security audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate
      
      - name: Check for vulnerabilities
        working-directory: ./frontend
        run: |
          if npm audit --audit-level=high --json | jq '.vulnerabilities | length > 0'; then
            echo "High severity vulnerabilities found!"
            npm audit --audit-level=high
            exit 1
          fi

  bundle-analysis:
    name: Bundle Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Analyze bundle size
        working-directory: ./frontend
        run: npm run perf:analyze
      
      - name: Check bundle size
        working-directory: ./frontend
        run: npm run perf:bundle-size
      
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: frontend/.next/analyze/

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, accessibility-tests, e2e-tests, performance-tests, visual-regression, security-audit, bundle-analysis]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
      
      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
            echo "✅ Accessibility Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Accessibility Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ Performance Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.visual-regression.result }}" == "success" ]; then
            echo "✅ Visual Regression Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Visual Regression Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security-audit.result }}" == "success" ]; then
            echo "✅ Security Audit: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Audit: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.bundle-analysis.result }}" == "success" ]; then
            echo "✅ Bundle Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Bundle Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi